{"version":3,"sources":["方法的name属性.003.js"],"names":[],"mappings":";;;;AAAA;;;;AAIA;;;AAGA;AACI,QAAI,SAAS;AACT,eADS,qBACC;AACN,oBAAQ,GAAR,CAAY,KAAK,IAAjB;AACH,SAHQ;;AAIT,YAAI,SAAJ,GAAgB;AACZ,mBAAO,UAAP;AACH;AANQ,KAAb;;AASA,QAAI,IAAI,OAAO,OAAP,CAAe,IAAvB;AACA,YAAQ,IAAR,CAAa,CAAb,EAXJ,CAWoB;;AAEhB,QAAI,OAAO,SAAP,CAAiB,IAArB;AACA,YAAQ,IAAR,CAAa,CAAb,EAdJ,CAcoB;AACnB;AACD;;;;AAIA;AACI,QAAI,KAAK,IAAI,QAAJ,EAAD,CAAiB,IAAzB;AACA,YAAQ,IAAR,CAAa,EAAb,EAFJ,CAEqB;;AAEjB,QAAI,cAAc,SAAd,WAAc,GAAY,CAC7B,CADD;AAEA,SAAI,YAAY,IAAZ,GAAmB,IAAvB;AACA,YAAQ,IAAR,CAAa,EAAb,EAPJ,CAOoB;AACnB;AACD;;;AAGA;AAAA;AAAA;;AACI,YAAM,OAAO,OAAO,aAAP,CAAb;AACA,YAAM,OAAO,QAAb;AACA,YAAI,wCACC,IADD,cACS,CACR,CAFD,yBAGC,IAHD,cAGS,CACR,CAJD,QAAJ;AAMA,YAAI,IAAI,IAAI,IAAJ,EAAU,IAAlB;AACA,gBAAQ,IAAR,CAAa,CAAb,EAVJ,CAUoB;;AAEhB,YAAI,IAAI,IAAJ,EAAU,IAAd;AACA,gBAAQ,IAAR,CAAa,CAAb,EAbJ,CAaoB;AAbpB;AAcC","file":"方法的name属性.003-compiled.js","sourcesContent":["/**\n * Created by liguohua on 2016/10/14.\n */\n\n/**\n *函数的name属性，返回函数名。对象方法也是函数，因此也有name属性。\n */\n{\n    var person = {\n        sayName() {\n            console.log(this.name);\n        },\n        get firstName() {\n            return \"Nicholas\";\n        }\n    };\n\n    let r = person.sayName.name;\n    console.info(r);// \"sayName\"\n\n    r = person.firstName.name;\n    console.info(r);// \"get firstName\"\n}\n/**\n *有两种特殊情况：bind方法创造的函数，name属性返回“bound”加上原函数的名字；\n * Function构造函数创造的函数，name属性返回“anonymous”。\n */\n{\n    let r = (new Function()).name;\n    console.info(r); // \"anonymous\"\n\n    var doSomething = function () {\n    };\n    r = doSomething.bind().name;\n    console.info(r);// \"bound doSomething\"\n}\n/**\n *如果对象的方法是一个Symbol值，那么name属性返回的是这个Symbol值的描述。\n */\n{\n    const key1 = Symbol('description');\n    const key2 = Symbol();\n    let obj = {\n        [key1]() {\n        },\n        [key2]() {\n        },\n    };\n    let r = obj[key1].name;\n    console.info(r);// \"[description]\"\n\n    r = obj[key2].name;\n    console.info(r);// \"\"\n}\n"]}