{"version":3,"sources":["属性的遍历.007.js"],"names":[],"mappings":";;;;AAAA;;;;AAIA;;;;;AAMA;;;;;AAMA;;;;;AAMA;;;;;AAMA;;;;AAIA;;;;;;;AAOA;AAAA;;AACI;AACA,MAAI,IAAI,QAAQ,OAAR,2DAAkB,QAAlB,EAA6B,CAA7B,0CAAmC,CAAnC,qCAAsC,EAAtC,EAA0C,CAA1C,qCAA6C,CAA7C,EAAgD,CAAhD,0CAAsD,CAAtD,qBAAR;AACA,UAAQ,IAAR,CAAa,CAAb,EAHJ,CAGmB;AAClB","file":"属性的遍历.007-compiled.js","sourcesContent":["/**\n * Created by liguohua on 2016/10/14.\n */\n\n/**\n （1）for...in\n for...in循环遍历对象自身的和继承的可枚举属性（不含Symbol属性）。\n */\n\n\n/**\n （2）Object.keys(obj)\n Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性）。\n */\n\n\n/**\n （3）Object.getOwnPropertyNames(obj)\n Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）。\n */\n\n\n/**\n （4）Object.getOwnPropertySymbols(obj)\n Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有Symbol属性。\n */\n\n\n/**\n （5）Reflect.ownKeys(obj)\n Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管是属性名是Symbol或字符串，也不管是否可枚举。\n */\n/**\n 以上的5种方法遍历对象的属性，都遵守同样的属性遍历的次序规则。\n\n 首先遍历所有属性名为数值的属性，按照数字排序。\n 其次遍历所有属性名为字符串的属性，按照生成时间排序。\n 最后遍历所有属性名为Symbol值的属性，按照生成时间排序。\n */\n{\n    //首先是数值属性2和10，其次是字符串属性b和a，最后是Symbol属性。\n    let r = Reflect.ownKeys({[Symbol()]: 0, b: 0, 10: 0, 2: 0, a: 0})\n    console.info(r)// ['2', '10', 'b', 'a', Symbol()]\n}\n"]}