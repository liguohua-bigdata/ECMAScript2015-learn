{"version":3,"sources":["__proto__属性.008.js"],"names":[],"mappings":";;AAAA;;;;AAKA;;;;;;;AAOA,CAkBC;AAjBG;;;;;;;;;;;AAYA;;;;;;AAMJ;;;;AAIA;AACI;AACI;AACA;AACA;AACA,QAAI,IAAI,OAAO,cAAP,CAAsB,EAAtB,EAA0B,IAA1B,CAAR;AACH;AACD;AACA;AAAA,QACa,EADb,GACI,SAAS,EAAT,CAAY,GAAZ,EAAiB,KAAjB,EAAwB;AACpB,UAAI,SAAJ,GAAgB,KAAhB;AACA,aAAO,GAAP;AACH,KAJL;AAKC;AACJ;AACD;;;AAGA;AACI,MAAI,QAAQ,EAAZ;AACA,MAAI,MAAM,EAAC,GAAG,EAAJ,EAAV;;AAEA;AACA,SAAO,cAAP,CAAsB,GAAtB,EAA2B,KAA3B;;AAEA,QAAM,CAAN,GAAU,EAAV;AACA,QAAM,CAAN,GAAU,EAAV;;AAEA,UAAQ,IAAR,CAAa,IAAI,CAAjB,EAVJ,CAUuB;AACnB,UAAQ,IAAR,CAAa,IAAI,CAAjB,EAXJ,CAWuB;AACnB,UAAQ,IAAR,CAAa,IAAI,CAAjB,EAZJ,CAYuB;AACtB;AACD;;;;AAIA;AAAA,MACa,SADb,GACI,SAAS,SAAT,GAAqB,CACpB,CAFL;;AAGI,MAAI,MAAM,IAAI,SAAJ,EAAV;AACA,MAAI,IAAI,OAAO,cAAP,CAAsB,GAAtB,MAA+B,UAAU,SAAjD;AACA,UAAQ,IAAR,CAAa,CAAb,EALJ,CAKoB;;AAEhB,SAAO,cAAP,CAAsB,GAAtB,EAA2B,OAAO,SAAlC;AACA,MAAI,OAAO,cAAP,CAAsB,GAAtB,MAA+B,UAAU,SAA7C;AACA,UAAQ,IAAR,CAAa,CAAb,EATJ,CASoB;AACnB;AACD;;;AAGA,CAEC;AACD;;;AAGA,CAEC;AACD;;;AAGA,CAEC;AACD;;;AAGA,CAEC;AACD;;;AAGA,CAEC;AACD;;;AAGA,CAEC","file":"__proto__属性.008-compiled.js","sourcesContent":["/**\n * Created by liguohua on 2016/10/14.\n */\n\n\n/**\n *（1）__proto__属性\n\n __proto__属性（前后各两个下划线），用来读取或设置当前对象的prototype对象。目前，所有浏览器（包括IE11）都部署了这个属性。\n 该属性没有写入ES6的正文，而是写入了附录，原因是__proto__前后的双下划线，\n 说明它本质上是一个内部属性，而不是一个正式的对外的API，只是由于浏览器广泛支持，才被加入了ES6。\n */\n{\n    /*\n     // es6的写法\n     var obj = {\n     method: function() {  }\n     };\n     obj.__proto__ = someOtherObj;\n\n     // es5的写法setPrototypeOf()\n     var obj = Object.create(someOtherObj);\n     obj.method = function() {  };\n     */\n\n    /**\n     * 标准明确规定，只有浏览器必须部署这个属性，其他运行环境不一定需要部署，而且新的代码最好认为这个属性是不存在的。\n     * 因此，无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，\n     * 而是使用下面的Object.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）代替。\n     */\n}\n/**\n *Object.setPrototypeOf()\n *Object.setPrototypeOf方法的作用与__proto__相同，用来设置一个对象的prototype对象。它是ES6正式推荐的设置原型对象的方法。\n */\n{\n    {\n        // 格式\n        //Object.setPrototypeOf(object, prototype)\n        // 用法\n        var o = Object.setPrototypeOf({}, null);\n    }\n    //等同于\n    {\n        function f1(obj, proto) {\n            obj.__proto__ = proto;\n            return obj;\n        }\n    }\n}\n/**\n *setPrototypeOf()用法示例\n */\n{\n    let proto = {};\n    let obj = {x: 10};\n\n    //将proto对象设为obj对象的原型，所以从obj对象可以读取proto对象的属性。\n    Object.setPrototypeOf(obj, proto);\n\n    proto.y = 20;\n    proto.z = 40;\n\n    console.info(obj.x)// 10\n    console.info(obj.y)// 20\n    console.info(obj.z)// 40\n}\n/**\n *  Object.getPrototypeOf()\n *  用于读取一个对象的prototype对象。\n */\n{\n    function Rectangle() {\n    }\n    var rec = new Rectangle();\n    let r = Object.getPrototypeOf(rec) === Rectangle.prototype\n    console.info(r);// true\n\n    Object.setPrototypeOf(rec, Object.prototype);\n    r = Object.getPrototypeOf(rec) === Rectangle.prototype\n    console.info(r);// false\n}\n/**\n *\n */\n{\n\n}\n/**\n *\n */\n{\n\n}\n/**\n *\n */\n{\n\n}\n/**\n *\n */\n{\n\n}\n/**\n *\n */\n{\n\n}\n/**\n *\n */\n{\n\n}\n"]}