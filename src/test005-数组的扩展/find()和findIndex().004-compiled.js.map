{"version":3,"sources":["find()和findIndex().004.js"],"names":[],"mappings":";;AAAA;;;AAGA;;;AAGA;AACI,KAAC,CAAD,EAAI,CAAJ,EAAO,CAAC,CAAR,EAAW,EAAX,EAAe,IAAf,CAAoB,UAAC,CAAD;AAAA,eAAO,IAAI,CAAX;AAAA,KAApB,EADJ,CACqC;AACpC;AACD;;;AAGA;AACI,KAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,EAAe,IAAf,CAAoB,UAAU,KAAV,EAAiB,KAAjB,EAAwB,GAAxB,EAA6B;AAC7C,gBAAQ,IAAR,CAAa,KAAb;AACA,gBAAQ,IAAR,CAAa,KAAb;AACA,gBAAQ,IAAR,CAAa,GAAb;AACA,eAAO,QAAQ,CAAf;AACH,KALD,EADJ,CAMO;AACN;AACD;;;AAGA;AACI,KAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,EAAe,SAAf,CAAyB,UAAU,KAAV,EAAiB,KAAjB,EAAwB,GAAxB,EAA6B;AAClD,eAAO,QAAQ,CAAf;AACH,KAFD,EADJ,CAGO;AACN;AACD;;;AAGA;AACI;AACA,KAAC,GAAD,EAAM,OAAN,CAAc,GAAd,EAFJ,CAEuB;;AAEnB;AACA,KAAC,GAAD,EAAM,SAAN,CAAgB;AAAA,eAAK,OAAO,EAAP,CAAU,GAAV,EAAe,CAAf,CAAL;AAAA,KAAhB,EALJ,CAK2C;AAC1C","file":"find()和findIndex().004-compiled.js","sourcesContent":["/**\n * Created by liguohua on 2016/10/11.\n */\n/**\n *数组实例的find方法，用于找出第一个符合条件的数组成员\n */\n{\n    [1, 4, -5, 10].find((n) => n < 0)// -5\n}\n/**\n *find方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。\n */\n{\n    [1, 5, 10, 15].find(function (value, index, arr) {\n        console.info(index);\n        console.info(value);\n        console.info(arr);\n        return value > 9;\n    }) // 10\n}\n/**\n *findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。\n */\n{\n    [1, 5, 10, 15].findIndex(function (value, index, arr) {\n        return value > 9;\n    }) // 2\n}\n/**\n *这两个方法都可以发现NaN，弥补了数组的IndexOf方法的不足。\n */\n{\n    //indexOf方法无法识别数组的NaN成员\n    [NaN].indexOf(NaN);// -1\n\n    //findIndex方法可以借助Object.is方法做到。识别数组的NaN成员\n    [NaN].findIndex(y => Object.is(NaN, y))// 0\n}\n"]}