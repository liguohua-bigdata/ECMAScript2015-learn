{"version":3,"sources":["Array.from().001.js"],"names":[],"mappings":"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","file":"Array.from().001-compiled.js","sourcesContent":["/**\n * Created by liguohua on 2016/10/11.\n */\n\n/**\n *Array.from方法用于将两类对象转为真正的数组：\n * 类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）\n */\n/**\n *下面是一个类似数组的对象，Array.from将它转为真正的数组。\n */\n{\n    let arrayLike = {\n        '0': 'a',\n        '1': 'b',\n        '2': 'c',\n        length: 3\n    };\n    // ES5的写法\n    var arr1 = [].slice.call(arrayLike); // ['a', 'b', 'c']\n    // ES6的写法\n    let arr2 = Array.from(arrayLike); // ['a', 'b', 'c']\n}\n/**\n *际应用中，常见的类似数组的对象是DOM操作返回的NodeList集合，以及函数内部的arguments对象。Array.from都可以将它们转为真正的数组。\n */\n{\n    // NodeList对象\n    let ps = document.querySelectorAll('p');\n    Array.from(ps).forEach(function (p) {\n        console.log(p);\n    });\n\n    // arguments对象\n    function foo() {\n        var args = Array.from(arguments);\n        // ...\n    }\n}\n/**\n *只要是部署了Iterator接口的数据结构，Array.from都能将其转为数组。\n */\n{\n    Array.from('hello')// ['h', 'e', 'l', 'l', 'o']\n\n    let namesSet = new Set(['a', 'b'])\n    Array.from(namesSet) // ['a', 'b']\n}\n/**\n *如果参数是一个真正的数组，Array.from会返回一个一模一样的新数组。\n */\n{\n    Array.from([1, 2, 3])// [1, 2, 3]\n}\n/**\n *得提醒的是，扩展运算符（...）也可以将某些数据结构转为数组。\n */\n{\n    // arguments对象\n    function foo() {\n        var args = [...arguments];\n    }\n\n    // NodeList对象\n    [...document.querySelectorAll('div')]\n}\n/**\n *扩展运算符背后调用的是遍历器接口（Symbol.iterator），如果一个对象没有部署这个接口，就无法转换。\n * Array.from方法则是还支持类似数组的对象。所谓类似数组的对象，本质特征只有一点，\n * 即必须有length属性。因此，任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。\n */\n{\n    Array.from({ length: 3 });// [ undefined, undefined, undefined ]\n}\n/**\n *Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。\n */\n{\n    Array.from(arrayLike, x => x * x);\n    // 等同于\n    Array.from(arrayLike).map(x => x * x);\n\n\n    Array.from([1, 2, 3], (x) => x * x)// [1, 4, 9]\n}\n/**\n *例子是取出一组DOM节点的文本内容。\n */\n{\n    let spans = document.querySelectorAll('span.name');\n    // map()\n    let names1 = Array.prototype.map.call(spans, s => s.textContent);\n\n    // Array.from()\n    let names2 = Array.from(spans, s => s.textContent)\n}\n/**\n *下面的例子将数组中布尔值为false的成员转为0。\n */\n{\n    Array.from([1, , 2, , 3], (n) => n || 0)// [1, 0, 2, 0, 3]\n}\n/**\n *返回各种数据的类型。\n */\n{\n    function typesOf () {\n        return Array.from(arguments, value => typeof value)\n    }\n    typesOf(null, [], NaN)// ['object', 'object', 'number']\n}\n/**\n *如果map函数里面用到了this关键字，还可以传入Array.from的第三个参数，用来绑定this。\n * Array.from()可以将各种值转为真正的数组，并且还提供map功能。这实际上意味着，只要有一个原始的数据结构，\n * 你就可以先对它的值进行处理，然后转成规范的数组结构，进而就可以使用数量众多的数组方法。\n */\n{\n    Array.from({ length: 2 }, () => 'jack')// ['jack', 'jack']\n}\n/**\n *Array.from()的另一个应用是，将字符串转为数组，然后返回字符串的长度。因为它能正确处理各种Unicode字符，\n * 可以避免JavaScript将大于\\uFFFF的Unicode字符，算作两个字符的bug。\n */\n{\n    function countSymbols(string) {\n        return Array.from(string).length;\n    }\n}\n"]}