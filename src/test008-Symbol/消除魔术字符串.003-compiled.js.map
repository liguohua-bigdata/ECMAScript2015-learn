{"version":3,"sources":["消除魔术字符串.003.js"],"names":[],"mappings":";;AAAA;;;;AAKA;;;AAGA;AACI;AADJ,QAEa,OAFb,GAEI,SAAS,OAAT,CAAiB,KAAjB,EAAwB,OAAxB,EAAiC;AAC7B,YAAI,OAAO,CAAX;;AAEA,gBAAQ,KAAR;AACI,iBAAK,UAAL;AAAiB;AACb,uBAAO,KAAK,QAAQ,KAAb,GAAqB,QAAQ,MAApC;AACA;AAHR;;AAMA,eAAO,IAAP;AACH,KAZL;;AAcI,YAAQ,UAAR,EAAoB,EAAC,OAAO,GAAR,EAAa,QAAQ,GAArB,EAApB,EAdJ,CAcoD;AACnD;AACD;;;AAGA;AAAA,QAKa,QALb,GAKI,SAAS,QAAT,CAAiB,KAAjB,EAAwB,OAAxB,EAAiC;AAC7B,YAAI,OAAO,CAAX;AACA,gBAAQ,KAAR;AACI,iBAAK,UAAU,QAAf;AACI,uBAAO,KAAK,QAAQ,KAAb,GAAqB,QAAQ,MAApC;AACA;AAHR;AAKA,eAAO,IAAP;AACH,KAbL;;AACI,QAAI,YAAY;AACZ,kBAAU;AADE,KAAhB;;AAcA,QAAI,IAAI,SAAQ,UAAU,QAAlB,EAA4B,EAAC,OAAO,GAAR,EAAa,QAAQ,GAArB,EAA5B,CAAR;AACA,YAAQ,IAAR,CAAa,CAAb;AACH;AACD;;;AAGA;AAAA;AAAA,YAMa,OANb,GAMI,SAAS,OAAT,CAAiB,KAAjB,EAAwB,OAAxB,EAAiC;AAC7B,gBAAI,OAAO,CAAX;AACA,oBAAQ,KAAR;AACI,qBAAK,UAAU,QAAf;AACI,2BAAO,KAAK,QAAQ,KAAb,GAAqB,QAAQ,MAApC;AACA;AAHR;AAKA,mBAAO,IAAP;AACH,SAdL;;AACI;AACA,YAAM,YAAY;AACd,sBAAU;AADI,SAAlB;;AAcA,YAAI,IAAI,QAAQ,UAAU,QAAlB,EAA4B,EAAC,OAAO,GAAR,EAAa,QAAQ,GAArB,EAA5B,CAAR;AACA,gBAAQ,IAAR,CAAa,CAAb;AAjBJ;AAkBC","file":"消除魔术字符串.003-compiled.js","sourcesContent":["/**\n * Created by liguohua on 2016/10/14.\n */\n\n\n/**\n *魔术字符串指的是，在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值\n */\n{\n    //字符串“Triangle”就是一个魔术字符串。它多次出现，与代码形成“强耦合”，不利于将来的修改和维护\n    function getArea(shape, options) {\n        var area = 0;\n\n        switch (shape) {\n            case 'Triangle': // 魔术字符串\n                area = .5 * options.width * options.height;\n                break;\n        }\n\n        return area;\n    }\n\n    getArea('Triangle', {width: 100, height: 100}); // 魔术字符串\n}\n/**\n *常用的消除魔术字符串的方法，就是把它写成一个变量。\n */\n{\n    var shapeType = {\n        triangle: 'Triangle'\n    };\n\n    function getArea(shape, options) {\n        var area = 0;\n        switch (shape) {\n            case shapeType.triangle:\n                area = .5 * options.width * options.height;\n                break;\n        }\n        return area;\n    }\n\n    let r = getArea(shapeType.triangle, {width: 100, height: 100});\n    console.info(r);\n}\n/**\n *可以发现shapeType.triangle等于哪个值并不重要，只要确保不会跟其他shapeType属性的值冲突即可。因此，这里就很适合改用Symbol值。\n */\n{\n    //除了将shapeType.triangle的值设为一个Symbol，其他地方都不用修改。\n    const shapeType = {\n        triangle: Symbol()\n    };\n\n    function getArea(shape, options) {\n        var area = 0;\n        switch (shape) {\n            case shapeType.triangle:\n                area = .5 * options.width * options.height;\n                break;\n        }\n        return area;\n    }\n\n    let r = getArea(shapeType.triangle, {width: 100, height: 100});\n    console.info(r);\n}\n"]}