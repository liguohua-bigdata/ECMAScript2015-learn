{"version":3,"sources":["内置的Symbol值.007.js"],"names":[],"mappings":";;;;;;;;;;AAAA;;;AAGA;;;AAGA;;;;;;AAMA;AACI;;;;;;;;;;;AAYA;;;;AAIH;AACD;AAAA,QACU,IADV;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAEgB,OAAO,WAFvB;AAAA,kCAEoC,GAFpC,EAEyC;AAC7B,uBAAO,OAAO,GAAP,IAAc,CAAd,KAAoB,CAA3B;AACH;AAJT;;AAAA;AAAA;;AAOI,QAAI,IAAI,aAAa,IAArB;AACA,YAAQ,IAAR,CAAa,CAAb,EARJ,CAQoB;AAChB,iBAAa,IAAb;AACA,YAAQ,IAAR,CAAa,CAAb,EAVJ,CAUoB;AAChB,qBAAiB,IAAjB;AACA,YAAQ,IAAR,CAAa,CAAb,EAZJ,CAYoB;AACnB;AACD;;;;;AAKA;AACI;AACA,QAAI,OAAO,CAAC,GAAD,EAAM,GAAN,CAAX;AACA,KAAC,GAAD,EAAM,GAAN,EAAW,MAAX,CAAkB,IAAlB,EAAwB,GAAxB,EAHJ,CAGiC;AAC7B,QAAI,KAAI,KAAK,OAAO,kBAAZ,CAAR;AACA,YAAQ,IAAR,CAAa,EAAb,EALJ,CAKoB;;;AAGhB;AACA,QAAI,OAAO,CAAC,GAAD,EAAM,GAAN,CAAX;AACA,SAAK,OAAO,kBAAZ,IAAkC,KAAlC;AACA,SAAI,CAAC,GAAD,EAAM,GAAN,EAAW,MAAX,CAAkB,IAAlB,EAAwB,GAAxB,CAAJ;AACA,YAAQ,IAAR,CAAa,EAAb,EAZJ,CAYoB;;AAEhB;AACA,SAAK,OAAO,kBAAZ,IAAkC,IAAlC;AACA,SAAI,CAAC,GAAD,EAAM,GAAN,EAAW,MAAX,CAAkB,IAAlB,EAAwB,GAAxB,CAAJ;AACA,YAAQ,IAAR,CAAa,EAAb,EAjBJ,CAiBoB;AACnB;;AAGD;;;AAGA;AACI;AACA,QAAI,MAAM,EAAC,QAAQ,CAAT,EAAY,GAAG,GAAf,EAAoB,GAAG,GAAvB,EAAV;AACA,QAAI,MAAI,CAAC,GAAD,EAAM,GAAN,EAAW,MAAX,CAAkB,GAAlB,EAAuB,GAAvB,CAAR;AACA,YAAQ,IAAR,CAAa,GAAb,EAJJ,CAIoB;;AAEhB;AACA,QAAI,OAAO,kBAAX,IAAiC,IAAjC;AACA,UAAI,CAAC,GAAD,EAAM,GAAN,EAAW,MAAX,CAAkB,GAAlB,EAAuB,GAAvB,CAAJ;AACA,YAAQ,IAAR,CAAa,GAAb,EATJ,CASoB;AACnB;AACD;;;AAGA;AAAA,QACU,EADV;AAAA;;AAEQ,oBAAY,IAAZ,EAAkB;AAAA;;AAEd;AAFc,gHACR,IADQ;;AAGd,kBAAK,OAAO,kBAAZ,IAAkC,IAAlC;AAHc;AAIjB;;AANT;AAAA,MACqB,KADrB;;AAAA,QAQU,EARV;AAAA;;AASQ,oBAAY,IAAZ,EAAkB;AAAA;;AAEd;AAFc,iHACR,IADQ;;AAGd,mBAAK,OAAO,kBAAZ,IAAkC,KAAlC;AAHc;AAIjB;;AAbT;AAAA,MAQqB,KARrB;;AAeI,QAAI,KAAK,IAAI,EAAJ,EAAT;AACA,OAAG,CAAH,IAAQ,CAAR;AACA,OAAG,CAAH,IAAQ,CAAR;AACA,QAAI,KAAK,IAAI,EAAJ,EAAT;AACA,OAAG,CAAH,IAAQ,CAAR;AACA,OAAG,CAAH,IAAQ,CAAR;AACA,QAAI,MAAI,CAAC,CAAD,EAAI,CAAJ,EAAO,MAAP,CAAc,EAAd,EAAkB,MAAlB,CAAyB,EAAzB,CAAR;AACA,YAAQ,IAAR,CAAa,GAAb,EAtBJ,CAsBoB;AACnB;AACD;;;AAGA,CAEC","file":"内置的Symbol值.007-compiled.js","sourcesContent":["/**\n * Created by liguohua on 2016/10/14.\n */\n/**\n *除了定义自己使用的Symbol值以外，ES6还提供了11个内置的Symbol值，指向语言内部使用的方法。\n */\n/**\n * Symbol.hasInstance\n 对象的Symbol.hasInstance属性，指向一个内部方法。当其他对象使用instanceof运算符，判断是否为该对象的实例时，会调用这个方法。\n 比如，foo instanceof Foo在语言内部，实际调用的是Foo[Symbol.hasInstance](foo)。\n */\n\n{\n    /*   class MyClass {\n     constructor(){\n\n     }\n     [Symbol.hasInstance](foo) {\n     console.info(foo);\n     return foo instanceof Array;\n     }\n     }\n     let myClass = new MyClass();\n     let r = [1, 2, 3] instanceof myClass;\n     console.info(r);// true*/\n    /**\n     * MyClass是一个类，new MyClass()会返回一个实例。该实例的Symbol.hasInstance方法，\n     * 会在进行instanceof运算时自动调用，判断左侧的运算子是否为Array的实例。\n     */\n}\n{\n    class Even {\n        static [Symbol.hasInstance](obj) {\n            return Number(obj) % 2 === 0;\n        }\n    }\n\n    let r = 1 instanceof Even;\n    console.info(r);// false\n    2 instanceof Even;\n    console.info(r);// true\n    12345 instanceof Even;\n    console.info(r);// false\n}\n/**\n *Symbol.isConcatSpreadable\n * 对象的Symbol.isConcatSpreadable属性等于一个布尔值，表示该对象使用Array.prototype.concat()时，是否可以展开。\n * 数组的默认行为是可以展开。Symbol.isConcatSpreadable属性等于true或undefined，都有这个效果。\n */\n{\n    //undefined\n    let arr1 = ['c', 'd'];\n    ['a', 'b'].concat(arr1, 'e') // ['a', 'b', 'c', 'd', 'e']\n    let r = arr1[Symbol.isConcatSpreadable]\n    console.info(r);// undefined\n\n\n    //不可展开\n    let arr2 = ['c', 'd'];\n    arr2[Symbol.isConcatSpreadable] = false;\n    r = ['a', 'b'].concat(arr2, 'e')\n    console.info(r);// ['a', 'b', ['c','d'], 'e']\n\n    //可展开\n    arr2[Symbol.isConcatSpreadable] = true;\n    r = ['a', 'b'].concat(arr2, 'e')\n    console.info(r);// ['a', 'b', ['c','d'], 'e']\n}\n\n\n/**\n 类似数组的对象也可以展开，但它的Symbol.isConcatSpreadable属性默认为false，必须手动打开。\n */\n{\n    //不可展开\n    let obj = {length: 2, 0: 'c', 1: 'd'};\n    let r = ['a', 'b'].concat(obj, 'e');\n    console.info(r);// ['a', 'b', obj, 'e']\n\n    //可展开\n    obj[Symbol.isConcatSpreadable] = true;\n    r = ['a', 'b'].concat(obj, 'e');\n    console.info(r);// ['a', 'b', 'c', 'd', 'e']\n}\n/**\n *对于一个类来说，Symbol.isConcatSpreadable属性必须写成实例的属性。\n */\n{\n    class A1 extends Array {\n        constructor(args) {\n            super(args);\n            //可展开\n            this[Symbol.isConcatSpreadable] = true;\n        }\n    }\n    class A2 extends Array {\n        constructor(args) {\n            super(args);\n            //不可展开\n            this[Symbol.isConcatSpreadable] = false;\n        }\n    }\n    let a1 = new A1();\n    a1[0] = 3;\n    a1[1] = 4;\n    let a2 = new A2();\n    a2[0] = 5;\n    a2[1] = 6;\n    let r = [1, 2].concat(a1).concat(a2)\n    console.info(r);// [1, 2, 3, 4, [5, 6]]\n}\n/**\n *\n */\n{\n\n}"]}