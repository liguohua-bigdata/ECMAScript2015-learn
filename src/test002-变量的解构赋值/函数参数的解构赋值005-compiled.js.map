{"version":3,"sources":["函数参数的解构赋值005.js"],"names":[],"mappings":";;;;AAAA;;;AAGA;;;AAGA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AAAA,QACa,GADb,GACI,SAAS,GAAT,OAAqB;AAAA;;AAAA,YAAP,CAAO;AAAA,YAAJ,CAAI;;AACjB,eAAO,IAAI,CAAX;AACH,KAHL;;AAKI,YAAQ,IAAR,CAAa,IAAI,CAAC,CAAD,EAAI,CAAJ,CAAJ,CAAb,EALJ,CAK8B;AAC7B;AACD;;;AAGA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AACI,QAAI,IAAI,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAiB,GAAjB,CAAqB;AAAA;;AAAA,YAAE,CAAF;AAAA,YAAK,CAAL;AAAA,eAAY,IAAI,CAAhB;AAAA,KAArB,CAAR;AACA,YAAQ,IAAR,CAAa,CAAb,EAFJ,CAEoB;AAEnB;AACD;;;AAGA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AAAA,QACa,IADb,GACI,SAAS,IAAT,GAAmC;AAAA,wFAAJ,EAAI;;AAAA,4BAApB,CAAoB;AAAA,YAApB,CAAoB,2BAAhB,CAAgB;AAAA,4BAAb,CAAa;AAAA,YAAb,CAAa,2BAAT,CAAS;;AAC/B,eAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;AACH,KAHL;;AAKI;;;AACA,YAAQ,IAAR,CAAa,KAAK,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAL,CAAb,EANJ,CAMuC;AACnC,YAAQ,IAAR,CAAa,KAAK,EAAC,GAAG,CAAJ,EAAL,CAAb,EAPJ,CAOgC;AAC5B,YAAQ,IAAR,CAAa,KAAK,EAAL,CAAb,EARJ,CAQ4B;AACxB,YAAQ,IAAR,CAAa,MAAb,EATJ,CAS0B;AACzB;AACD;;;AAGA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AAAA,QACa,KADb,GACI,SAAS,KAAT,GAAqC;AAAA,wFAAd,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAc;;AAAA,YAAtB,CAAsB,SAAtB,CAAsB;AAAA,YAAnB,CAAmB,SAAnB,CAAmB;;AACjC,eAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;AACH,KAHL;;AAKI,YAAQ,IAAR,CAAa,MAAK,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAL,CAAb,EALJ,CAKsC;AAClC,YAAQ,IAAR,CAAa,MAAK,EAAC,GAAG,CAAJ,EAAL,CAAb,EANJ,CAMgC;AAC5B,YAAQ,IAAR,CAAa,MAAK,EAAL,CAAb,EAPJ,CAO4B;AACxB,YAAQ,IAAR,CAAa,OAAb,EARJ,CAQ0B;AACzB;AACD;;;AAGA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AACI,QAAI,KAAI,CAAC,CAAD,EAAI,SAAJ,EAAe,CAAf,EAAkB,GAAlB,CAAsB;AAAA,YAAC,CAAD,uEAAK,KAAL;AAAA,eAAe,CAAf;AAAA,KAAtB,CAAR;AACA,YAAQ,IAAR,CAAa,EAAb,EAFJ,CAEoB;AACnB","file":"函数参数的解构赋值005-compiled.js","sourcesContent":["/**\n * Created by liguohua on 16/10/10.\n */\n/**\n *函数的参数也可以使用解构赋值\n */\nconsole.log(\"**************001\");\n{\n    function add([x, y]) {\n        return x + y;\n    }\n\n    console.info(add([1, 2]));// 3\n}\n/**\n *另一个例子\n */\nconsole.log(\"**************002\");\n{\n    let r = [[1, 2], [3, 4]].map(([a, b]) => a + b);\n    console.info(r);// [ 3, 7 ]\n\n}\n/**\n *函数参数的解构也可以使用默认值。\n */\nconsole.log(\"**************003\");\n{\n    function move({x = 0, y = 0} = {}) {\n        return [x, y];\n    }\n\n    //果解构失败，x和y等于默认值。\n    console.info(move({x: 3, y: 8}));  // [3, 8]\n    console.info(move({x: 3})); // [3, 0]\n    console.info(move({})); // [0, 0]\n    console.info(move()); // [0, 0]\n}\n/**\n *代码是为函数move的参数指定默认值，而不是为变量x和y指定默认值，所以会得到与前一种写法不同的结果。\n */\nconsole.log(\"**************004\");\n{\n    function move({x, y} = {x: 0, y: 0}) {\n        return [x, y];\n    }\n\n    console.info(move({x: 3, y: 8})); // [3, 8]\n    console.info(move({x: 3})); // [3, undefined]\n    console.info(move({})); // [undefined, undefined]\n    console.info(move()); // [0, 0]\n}\n/**\n *undefined就会触发函数参数的默认值。\n */\nconsole.log(\"**************005\");\n{\n    let r = [1, undefined, 3].map((x = 'yes') => x);\n    console.info(r);// [ 1, 'yes', 3 ]\n}\n\n"]}