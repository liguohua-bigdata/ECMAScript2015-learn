{"version":3,"sources":["rootobject005.js"],"names":[],"mappings":";;;;AAAA;;;AAGA;;;;AAIA,OAAO,CAAP,GAAW,CAAX;AACA,E,CAAE;;AAEF,IAAI,CAAJ;AACA,OAAO,CAAP,C,CAAS;;;AAGT;;;;;;;AAOA,IAAI,IAAI,CAAR;AACA;AACA;AACA,OAAO,CAAP,C,CAAS;;AAET,IAAI,IAAI,CAAR;AACA,OAAO,CAAP,CAAS;;;AAIT;;;;;;;;;;;;;;;;AAiBA;;;AAGA;AAxBA,CAyBC,OAAO,MAAP,KAAkB,WAAlB,GACK,MADL,GAEM,QAAO,OAAP,yCAAO,OAAP,OAAmB,QAAnB,IACP,OAAO,OAAP,KAAmB,UADZ,IAEP,QAAO,MAAP,yCAAO,MAAP,OAAkB,QAFZ,GAGA,MAHA,YA3BN;;AAiCA;AACA,IAAI,YAAY,SAAZ,SAAY,GAAY;AACxB,MAAI,OAAO,IAAP,KAAgB,WAApB,EAAiC;AAAE,WAAO,IAAP;AAAc;AACjD,MAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AAAE,WAAO,MAAP;AAAgB;AACrD,MAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AAAE,WAAO,MAAP;AAAgB;AACrD,QAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACH,CALD;;AAQA","file":"rootobject005-compiled.js","sourcesContent":["/**\n * Created by liguohua on 16/10/10.\n */\n/**\n * ES6:顶层对象，在浏览器环境指的是window对象，在Node指的是global对象。\n * ES5:顶层对象的属性与全局变量是等价的。\n */\nwindow.a = 1;\na // 1\n\na = 2;\nwindow.a // 2\n\n\n/**\n ES6为了改变这一点，一方面规定，为了保持兼容性，var命令和function命令声明的全局变量，\n 依旧是顶层对象的属性；另一方面规定，let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。\n 也就是说，从ES6开始，全局变量将逐步与顶层对象的属性脱钩。\n\n */\n\nvar a = 1;\n// 如果在Node的REPL环境，可以写成global.a\n// 或者采用通用方法，写成this.a\nwindow.a // 1\n\nlet b = 1;\nwindow.b // undefined\n\n\n\n/**\n * 顶层对象\n ES5的顶层对象，本身也是一个问题，因为它在各种实现里面是不统一的。\n\n 浏览器里面，顶层对象是window，但Node和Web Worker没有window。\n 浏览器和Web Worker里面，self也指向顶层对象，但是Node没有self。\n Node里面，顶层对象是global，但其他环境都不支持。\n 为了能够在各种环境，都能取到顶层对象，现在一般是使用this变量。\n\n 全局环境中，this会返回顶层对象。但是，Node模块和ES6模块中，this返回的是当前模块。\n 函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。\n 但是，严格模式下，这时this会返回undefined。\n 不管是严格模式，还是普通模式，new Function('return this')()，总是会返回全局对象。\n 但是，如果浏览器用了CSP（Content Security Policy，内容安全政策），那么eval、new Function这些方法都可能无法使用。\n */\n\n\n/**\n * 很难找到一种方法，可以在所有情况下，都取到顶层对象。下面是两种勉强可以使用的方法。\n */\n// 方法一\n(typeof window !== 'undefined'\n    ? window\n    : (typeof process === 'object' &&\ntypeof require === 'function' &&\ntypeof global === 'object')\n    ? global\n    : this);\n\n// 方法二\nvar getGlobal = function () {\n    if (typeof self !== 'undefined') { return self; }\n    if (typeof window !== 'undefined') { return window; }\n    if (typeof global !== 'undefined') { return global; }\n    throw new Error('unable to locate global object');\n};\n\n\n/**\n * 总结:\n * 浏览    :层次对象=wndow和self\n * node    :顶层对象=global\n * webwork: 顶层对象=self\n *\n */"]}