{"version":3,"sources":["模板字符串.013.js"],"names":[],"mappings":";;AAAA;;;AAGA;;;AAGA,CAOC;AANG;;;;;;;AAOJ;;;;;AAKA,CAQC;AAPG;;;;;;;;AAQJ;;;AAGA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AACI;AACA,MAAI,wCAAJ;AACA,UAAQ,IAAR,CAAa,CAAb;;AAEA;AACA;AAEA,UAAQ,IAAR,CAAa,CAAb;AACA,UAAQ,GAAR;;AAGA;AACA,MAAI,OAAO,KAAX;AAAA,MAAkB,OAAO,OAAzB;AACA,iBAAa,IAAb,sBAAkC,IAAlC;AACA,UAAQ,IAAR,CAAa,CAAb;AAEH;AACD;;;AAGA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AACI,MAAI,wBAAJ;AACA,UAAQ,IAAR,CAAa,QAAb;AAEH;AACD;;;AAGA,CAoBC;AAnBG;;;;;;;;AAQA;;AAEA;;;;;;;;;;AAUJ;;;AAGA;AAAA,MACa,SADb,GACI,SAAS,SAAT,CAAmB,IAAnB,EAAyB,MAAzB,EAAiC;AAC7B,QAAI,CAAC,KAAK,YAAL,CAAkB,MAAlB,CAAL,EAAgC;AAC5B,YAAM,IAAI,KAAJ;AACF;AACA;AACA;AACA;AACA;AACA;AANE,gBAOM,KAAK,IAPX,iCAO2C,MAP3C,OAAN;AAQH;AACJ,GAZL;AAaC;AACD;;;AAGA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AACI,MAAI,IAAI,CAAR;AACA,MAAI,IAAI,CAAR;;AAEA,MAAI,KAAO,CAAP,WAAc,CAAd,YAAqB,IAAI,CAAzB,CAAJ;AACA,UAAQ,IAAR,CAAa,EAAb,EALJ,CAKoB;;AAEhB,OAAO,CAAP,WAAc,IAAI,CAAlB,YAAyB,IAAI,IAAI,CAAjC;AACA,UAAQ,IAAR,CAAa,EAAb,EARJ,CAQoB;;AAEhB,MAAI,MAAM,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAV;AACA,aAAO,IAAI,CAAJ,GAAQ,IAAI,CAAnB;AACA,UAAQ,IAAR,CAAa,EAAb,EAZJ,CAYoB;AACnB;AACD;;;;;AAKA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AAAA,MACa,EADb,GACI,SAAS,EAAT,GAAc;AACV,WAAO,aAAP;AACH,GAHL;;AAKI,MAAI,eAAW,IAAX,SAAJ;AACA,UAAQ,IAAR,CAAa,GAAb,EANJ,CAMoB;AACnB;AACD;;;AAGA,CAMC;AALG;;;;;;AAMJ;;;AAGA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AACI,MAAI,iBAAW,OAAf;AACA,UAAQ,IAAR,CAAa,GAAb,EAFJ,CAEoB;AACnB;;AAGD;;;AAGA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AACI,MAAM,OAAO,SAAP,IAAO;AAAA,uCAET,MAAM,GAAN,CAAU;AAAA,oCACA,KAAK,KADL,oCAEA,KAAK,IAFL;AAAA,KAAV,EAGC,IAHD,CAGM,EAHN,CAFS;AAAA,GAAb;AAQA,MAAM,OAAO,CACT,EAAC,OAAO,QAAR,EAAkB,MAAM,MAAxB,EADS,EAET,EAAC,OAAO,MAAR,EAAgB,MAAM,SAAtB,EAFS,CAAb;;AAKA,UAAQ,IAAR,CAAa,KAAK,IAAL,CAAb;AACH;AACD;;;;AAIA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AACI;AACA,MAAI,MAAM,YAAY,kBAAtB;AACA,MAAI,OAAO,IAAI,QAAJ,CAAa,MAAb,EAAqB,GAArB,CAAX;AACA,UAAQ,IAAR,CAAa,KAAK,MAAL,CAAb,EAJJ,CAIgC;;AAE5B;AACA,MAAI,OAAO,4BAAX;AACA,MAAI,QAAQ,KAAK,IAAL,CAAU,IAAV,EAAgB,IAAhB,CAAZ;AACA,UAAQ,IAAR,CAAa,MAAM,MAAN,CAAb,EATJ,CASiC;AAChC","file":"模板字符串.013-compiled.js","sourcesContent":["/**\n * Created by liguohua on 16/10/11.\n */\n/**\n *传统的JavaScript语言，输出模板通常是这样写的。\n */\n{\n    /* $('#result').append(\n     'There are <b>' + basket.count + '</b> ' +\n     'items in your basket, ' +\n     '<em>' + basket.onSale +\n     '</em> are on sale!'\n     );*/\n}\n/**\n *面这种写法相当繁琐不方便，ES6引入了模板字符串解决这个问题。\n * 模板字符串（template string）是增强版的字符串，用反引号（`）标识。\n * 它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。\n */\n{\n    /*\n     $('#result').append(`\n     There are <b>${basket.count}</b> items\n     in your basket, <em>${basket.onSale}</em>\n     are on sale!\n     `);\n     */\n}\n/**\n *\n */\nconsole.log(\"**************001\");\n{\n    // 普通字符串\n    let r = `In JavaScript '\\n' is a line-feed.`\n    console.info(r);\n\n    // 多行字符串\n    r = `In JavaScript this is\n            not legal.`\n    console.info(r);\n    console.log(`string text line 1\n                string text line 2`);\n\n    // 字符串中嵌入变量\n    var name = \"Bob\", time = \"today\";\n    r = `Hello ${name}, how are you ${time}?`\n    console.info(r);\n\n}\n/**\n *代码中的模板字符串，都是用反引号表示。如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。\n */\nconsole.log(\"**************002\");\n{\n    var greeting = `\\`Yo\\` World!`;\n    console.info(greeting);\n\n}\n/**\n *如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。\n */\n{\n    /*\n     $('#list').html(`\n     <ul>\n     <li>first</li>\n     <li>second</li>\n     </ul>\n     `);\n     */\n    //，比如<ul>标签前面会有一个换行。如果你不想要这个换行，可以使用trim方法消除它。\n\n    /*\n     $('#list').html(`\n     <ul>\n     <li>first</li>\n     <li>second</li>\n     </ul>\n     `.trim()\n     );\n     */\n}\n/**\n *模板字符串中嵌入变量，需要将变量名写在${}之中。\n */\n{\n    function authorize(user, action) {\n        if (!user.hasPrivilege(action)) {\n            throw new Error(\n                // 传统写法为\n                // 'User '\n                // + user.name\n                // + ' is not authorized to do '\n                // + action\n                // + '.'\n                `User ${user.name} is not authorized to do ${action}.`);\n        }\n    }\n}\n/**\n *大括号内部可以放入任意的JavaScript表达式，可以进行运算，以及引用对象属性。\n */\nconsole.log(\"**************003\");\n{\n    var x = 1;\n    var y = 2;\n\n    let r = `${x} + ${y} = ${x + y}`\n    console.info(r);// \"1 + 2 = 3\"\n\n    r = `${x} + ${y * 2} = ${x + y * 2}`\n    console.info(r);// \"1 + 4 = 5\"\n\n    var obj = {x: 1, y: 2};\n    r = `${obj.x + obj.y}`\n    console.info(r);// 3\n}\n/**\n *模板字符串之中还能调用函数。\n * 如果大括号中的值不是字符串，将按照一般的规则转为字符串。\n * 大括号中是一个对象，将默认调用对象的toString方法。\n */\nconsole.log(\"**************004\");\n{\n    function fn() {\n        return \"Hello World\";\n    }\n\n    let r = `foo ${fn()} bar`\n    console.info(r);// foo Hello World bar\n}\n/**\n *如果模板字符串中的变量没有声明，将报错。\n */\n{\n    /*\n     // 变量place没有声明\n     var msg = `Hello, ${place}`;\n     // 报错\n     */\n}\n/**\n *如果大括号内部是一个字符串，将会原样输出。\n */\nconsole.log(\"**************005\");\n{\n    let r=`Hello ${'World'}`\n    console.info(r);/// \"Hello World\"\n}\n\n\n/**\n *模板字符串甚至还能嵌套。\n */\nconsole.log(\"**************006\");\n{\n    const tmpl = addrs => `\n      <table>\n      ${addrs.map(addr => `\n        <tr><td>${addr.first}</td></tr>\n        <tr><td>${addr.last}</td></tr>\n      `).join('')}\n      </table>\n    `;\n    const data = [\n        {first: '<Jane>', last: 'Bond'},\n        {first: 'Lars', last: '<Croft>'},\n    ];\n\n    console.info(tmpl(data));\n}\n/**\n * 一般用不到!!\n *如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。\n */\nconsole.log(\"**************007\");\n{\n    // 写法一\n    let str = 'return ' + '`Hello ${name}!`';\n    let func = new Function('name', str);\n    console.info(func('Jack')); // \"Hello Jack!\"\n\n    // 写法二\n    let str0 = '(name) => `Hello ${name}!`';\n    let func0 = eval.call(null, str0);\n    console.info(func0('Jack')); // \"Hello Jack!\"\n}\n\n"]}