{"version":3,"sources":["codePointAt002.js"],"names":[],"mappings":";;AAAA;;;AAGA;;;;AAIA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AACI,MAAI,IAAI,IAAR;AACA,UAAQ,IAAR,CAAa,EAAE,MAAf,EAFJ,CAE2B;AACvB,UAAQ,IAAR,CAAa,EAAE,MAAF,CAAS,CAAT,CAAb,EAHJ,CAG+B;AAC3B,UAAQ,IAAR,CAAa,EAAE,MAAF,CAAS,CAAT,CAAb,EAJJ,CAIgC;AAC5B,UAAQ,IAAR,CAAa,EAAE,UAAF,CAAa,CAAb,CAAb,EALJ,CAKkC;AAC9B,UAAQ,IAAR,CAAa,EAAE,UAAF,CAAa,CAAb,CAAb,EANJ,CAMkC;AAC9B;;;;;AAKH;;AAED;;;AAGA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AACI,MAAI,IAAI,KAAR;AACA,UAAQ,IAAR,CAAa,EAAE,WAAF,CAAc,CAAd,CAAb,EAFJ,CAEmC;AAC/B,UAAQ,IAAR,CAAa,EAAE,WAAF,CAAc,CAAd,CAAb,EAHJ,CAGmC;;AAE/B,UAAQ,IAAR,CAAa,EAAE,UAAF,CAAa,CAAb,CAAb,EALJ,CAKkC;AAC9B,UAAQ,IAAR,CAAa,EAAE,UAAF,CAAa,CAAb,CAAb,EANJ,CAMkC;AAC9B,UAAQ,IAAR,CAAa,EAAE,UAAF,CAAa,CAAb,CAAb,EAPJ,CAOkC;AAC9B;;;;;;;AASH;AACD;;;AAGA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AACI,MAAI,IAAI,KAAR;AACA,UAAQ,IAAR,CAAa,EAAE,WAAF,CAAc,CAAd,EAAiB,QAAjB,CAA0B,EAA1B,CAAb,EAFJ,CAEgD;AAC5C,UAAQ,IAAR,CAAa,EAAE,UAAF,CAAa,CAAb,EAAgB,QAAhB,CAAyB,EAAzB,CAAb,EAHJ,CAG8C;AAC7C;AACD;;;;AAIA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AACI,MAAI,IAAI,KAAR;AADJ;AAAA;AAAA;;AAAA;AAEI,yBAAe,CAAf,8HAAkB;AAAA,UAAT,EAAS;;AACd,cAAQ,GAAR,CAAY,GAAG,WAAH,CAAe,CAAf,EAAkB,QAAlB,CAA2B,EAA3B,CAAZ;AACH;AACD;AACA;AANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOC;AACD;;;AAGA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AAAA,MACa,OADb,GACI,SAAS,OAAT,CAAiB,CAAjB,EAAoB;AAChB,WAAO,EAAE,WAAF,CAAc,CAAd,IAAmB,MAA1B;AACH,GAHL;;AAKI,UAAQ,IAAR,CAAa,QAAQ,IAAR,CAAb,EALJ,CAKiC;AAC7B,UAAQ,IAAR,CAAa,QAAQ,GAAR,CAAb,EANJ,CAM+B;AAC9B","file":"codePointAt002-compiled.js","sourcesContent":["/**\n * Created by liguohua on 16/10/10.\n */\n/**\n *JavaScript内部，字符以UTF-16的格式储存，每个字符固定为2个字节。\n * 对于那些需要4个字节储存的字符（Unicode码点大于0xFFFF的字符），JavaScript会认为它们是两个字符。\n */\nconsole.log(\"**************001\");\n{\n    var s = \"𠮷\";\n    console.info(s.length);// 2\n    console.info(s.charAt(0)); // ''\n    console.info(s.charAt(1));  // ''\n    console.info(s.charCodeAt(0));// 55362\n    console.info(s.charCodeAt(1));// 57271\n    /**\n     * 汉字“𠮷”的码点是0x20BB7，UTF-16编码为0xD842 0xDFB7（十进制为55362 57271），需要4个字节储存。\n     * 对于这种4个字节的字符，JavaScript不能正确处理，字符串长度会误判为2，而且charAt方法无法读取整个字符，\n     * charCodeAt方法只能分别返回前两个字节和后两个字节的值。\n     */\n}\n\n/**\n *ES6提供了codePointAt方法，能够正确处理4个字节储存的字符，返回一个字符的码点。\n */\nconsole.log(\"**************002\");\n{\n    var s = '𠮷a';\n    console.info(s.codePointAt(0));// 134071\n    console.info(s.codePointAt(1));// 57271\n\n    console.info(s.charCodeAt(0));// 55362\n    console.info(s.charCodeAt(1));// 57271\n    console.info(s.charCodeAt(2));// 97\n    /**\n     * codePointAt方法的参数，是字符在字符串中的位置（从0开始）。\n     * 上面代码中，JavaScript将“𠮷a”视为三个字符，codePointAt方法在第一个字符上，\n     * 正确地识别了“𠮷”，返回了它的十进制码点134071（即十六进制的20BB7）。\n     * 在第二个字符（即“𠮷”的后两个字节）和第三个字符“a”上，codePointAt方法的结果与charCodeAt方法相同。\n     * 总之，codePointAt方法会正确返回32位的UTF-16字符的码点。对于那些两个字节储存的常规字符，它的返回结果与charCodeAt方法相同。\n     */\n\n\n}\n/**\n * codePointAt方法返回的是码点的十进制值，如果想要十六进制的值，可以使用toString方法转换一下。\n */\nconsole.log(\"**************003\");\n{\n    var s = '𠮷a';\n    console.info(s.codePointAt(0).toString(16));// \"20bb7\"\n    console.info(s.charCodeAt(2).toString(16))// \"61\"\n}\n/**\n *上面代码中，字符a在字符串s的正确位置序号应该是1，但是必须向charCodeAt方法传入2。\n * 解决这个问题的一个办法是使用for...of循环，因为它会正确识别32位的UTF-16字符。\n */\nconsole.log(\"**************004\");\n{\n    var s = '𠮷a';\n    for (let ch of s) {\n        console.log(ch.codePointAt(0).toString(16));\n    }\n    // 20bb7\n    // 61\n}\n/**\n *codePointAt方法是测试一个字符由两个字节还是由四个字节组成的最简单方法。\n */\nconsole.log(\"**************005\");\n{\n    function is32Bit(c) {\n        return c.codePointAt(0) > 0xFFFF;\n    }\n\n    console.info(is32Bit(\"𠮷\")); // true\n    console.info(is32Bit(\"a\"));// false\n}\n\n"]}