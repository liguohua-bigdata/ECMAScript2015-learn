{"version":3,"sources":["normalize.006.js"],"names":[],"mappings":";;AAAA;;;AAGA;;;;;;AAMA;;;AAGA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AACI,MAAI,KAAK,SAAS,MAAlB,CADJ,CAC6B;AACzB,UAAQ,IAAR,CAAa,EAAb;;AAEA;AACA,OAAK,UAAe,MAApB,CALJ,CAK+B;AAC3B,UAAQ,IAAR,CAAa,EAAb;;AAEA;AACA,OAAK,aAAa,SAAlB,CATJ,CASqC;AACjC,UAAQ,IAAR,CAAa,EAAb;AAEH;AACD;;;AAGA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AACI,MAAI,IAAI,SAAS,SAAT,OAAyB,UAAe,SAAf,EAAjC;AACA,UAAQ,IAAR,CAAa,CAAb,EAFJ,CAEoB;AAChB;;;;;;;AAOH;AACD;;;AAGA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AACI;AACA,MAAI,KAAI,UAAe,SAAf,CAAyB,KAAzB,EAAgC,MAAxC;AACA,UAAQ,IAAR,CAAa,EAAb,EAHJ,CAGqB;;AAEjB;AACA,OAAI,UAAe,SAAf,CAAyB,KAAzB,EAAgC,MAApC;AACA,UAAQ,IAAR,CAAa,EAAb,EAPJ,CAOoB;;AAEhB;AACH","file":"normalize.006-compiled.js","sourcesContent":["/**\n * Created by liguohua on 16/10/10.\n */\n/**\n * 许多欧洲语言有语调符号和重音符号。为了表示它们，Unicode提供了两种方法。一种是直接提供带重音符号的字符，\n * 比如Ǒ（\\u01D1）。另一种是提供合成符号（combining character），即原字符与重音符号的合成，\n * 两个字符合成一个字符，比如O（\\u004F）和ˇ（\\u030C）合成Ǒ（\\u004F\\u030C）。\n */\n\n/**\n *这两种表示方法，在视觉和语义上都等价，但是JavaScript不能识别。\n */\nconsole.log(\"**************001\");\n{\n    let r1 = '\\u01D1'.length // 1\n    console.info(r1);\n\n    //JavaScript将合成字符视为两个字符，\n    r1 = '\\u004F\\u030C'.length // 2\n    console.info(r1);\n\n    //导致两种表示方法不相等\n    r1 = '\\u01D1' === '\\u004F\\u030C' //false\n    console.info(r1);\n\n}\n/**\n *ES6提供字符串实例的normalize()方法，用来将字符的不同表示方法统一为同样的形式，这称为Unicode正规化。\n */\nconsole.log(\"**************002\");\n{\n    let r = '\\u01D1'.normalize() === '\\u004F\\u030C'.normalize()\n    console.info(r);// true\n    /**\n     * normalize方法可以接受一个参数来指定normalize的方式，参数的四个可选值如下。\n     NFC，默认参数，表示“标准等价合成”（Normalization Form Canonical Composition），返回多个简单字符的合成字符。所谓“标准等价”指的是视觉和语义上的等价。\n     NFD，表示“标准等价分解”（Normalization Form Canonical Decomposition），即在标准等价的前提下，返回合成字符分解的多个简单字符。\n     NFKC，表示“兼容等价合成”（Normalization Form Compatibility Composition），返回合成字符。所谓“兼容等价”指的是语义上存在等价，但视觉上不等价，比如“囍”和“喜喜”。（这只是用来举例，normalize方法不能识别中文。）\n     NFKD，表示“兼容等价分解”（Normalization Form Compatibility Decomposition），即在兼容等价的前提下，返回合成字符分解的多个简单字符。\n     */\n}\n/**\n normalize分解和合成\n */\nconsole.log(\"**************003\");\n{\n    //NFC参数返回字符的合成形式\n    let r = '\\u004F\\u030C'.normalize('NFC').length\n    console.info(r); // 1\n\n    //NFD参数返回字符的分解形式\n    r = '\\u004F\\u030C'.normalize('NFD').length\n    console.info(r);// 2\n\n    //，normalize方法目前不能识别三个或三个以上字符的合成。这种情况下，还是只能使用正则表达式，通过Unicode编号区间判断。\n}"]}