{"version":3,"sources":["Number.isFinite().Number.isNaN().002.js"],"names":[],"mappings":";;AAAA;;;;AAKA;;;;AAIA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AACI,MAAI,IAAI,OAAO,QAAP,CAAgB,EAAhB,CAAR;AACA,UAAQ,IAAR,CAAa,CAAb,EAFJ,CAEoB;;AAEhB,MAAI,OAAO,QAAP,CAAgB,GAAhB,CAAJ;AACA,UAAQ,IAAR,CAAa,CAAb,EALJ,CAKoB;;AAEhB,MAAI,OAAO,QAAP,CAAgB,GAAhB,CAAJ;AACA,UAAQ,IAAR,CAAa,CAAb,EARJ,CAQoB;;AAEhB,MAAI,OAAO,QAAP,CAAgB,QAAhB,CAAJ;AACA,UAAQ,IAAR,CAAa,CAAb,EAXJ,CAWoB;;AAEhB,MAAI,OAAO,QAAP,CAAgB,CAAC,QAAjB,CAAJ;AACA,UAAQ,IAAR,CAAa,CAAb,EAdJ,CAcoB;;AAEhB,MAAI,OAAO,QAAP,CAAgB,KAAhB,CAAJ;AACA,UAAQ,IAAR,CAAa,CAAb,EAjBJ,CAiBoB;;AAEhB,MAAI,OAAO,QAAP,CAAgB,IAAhB,CAAJ;AACA,UAAQ,IAAR,CAAa,CAAb,EApBJ,CAoBoB;;AAEhB,MAAI,OAAO,QAAP,CAAgB,IAAhB,CAAJ;AACA,UAAQ,IAAR,CAAa,CAAb,EAvBJ,CAuBoB;AACnB;AACD;;;;;AAKA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AACI,MAAI,KAAI,SAAS,EAAT,CAAR;AACA,UAAQ,IAAR,CAAa,EAAb,EAFJ,CAEoB;;AAEhB,OAAI,SAAS,IAAT,CAAJ;AACA,UAAQ,IAAR,CAAa,EAAb,EALJ,CAKoB;;AAEhB,OAAI,OAAO,QAAP,CAAgB,EAAhB,CAAJ;AACA,UAAQ,IAAR,CAAa,EAAb,EARJ,CAQoB;;AAEhB,OAAI,OAAO,QAAP,CAAgB,IAAhB,CAAJ;AACA,UAAQ,IAAR,CAAa,EAAb,EAXJ,CAWoB;;AAEhB,OAAI,MAAM,GAAN,CAAJ;AACA,UAAQ,IAAR,CAAa,EAAb,EAdJ,CAcoB;;AAEhB,OAAI,MAAM,KAAN,CAAJ;AACA,UAAQ,IAAR,CAAa,EAAb,EAjBJ,CAiBoB;;AAEhB,OAAI,OAAO,KAAP,CAAa,GAAb,CAAJ;AACA,UAAQ,IAAR,CAAa,EAAb,EApBJ,CAoBoB;;AAEhB,OAAI,OAAO,KAAP,CAAa,KAAb,CAAJ;AACA,UAAQ,IAAR,CAAa,EAAb,EAvBJ,CAuBoB;AACnB","file":"Number.isFinite().Number.isNaN().002-compiled.js","sourcesContent":["/**\n * Created by liguohua on 2016/10/11.\n */\n\n\n/**\n *ES6在Number对象上，新提供了Number.isFinite()和Number.isNaN()两个方法。\n Number.isFinite()用来检查一个数值是否为有限的（finite）\n */\nconsole.log(\"**************001\");\n{\n    let r = Number.isFinite(15);\n    console.info(r);// true\n\n    r = Number.isFinite(0.8);\n    console.info(r);// true\n\n    r = Number.isFinite(NaN);\n    console.info(r);// false\n\n    r = Number.isFinite(Infinity);\n    console.info(r);// false\n\n    r = Number.isFinite(-Infinity);\n    console.info(r);// false\n\n    r = Number.isFinite('foo');\n    console.info(r);// false\n\n    r = Number.isFinite('15');\n    console.info(r);// false\n\n    r = Number.isFinite(true);\n    console.info(r);// false\n}\n/**\n *它们与传统的全局方法isFinite()和isNaN()的区别在于，\n * 传统方法先调用Number()将非数值的值转为数值，\n * 再进行判断，而这两个新方法只对数值有效，非数值一律返回false。\n */\nconsole.log(\"**************002\");\n{\n    let r = isFinite(25)\n    console.info(r);// true\n\n    r = isFinite(\"25\");\n    console.info(r);// true\n\n    r = Number.isFinite(25);\n    console.info(r);// true\n\n    r = Number.isFinite(\"25\");\n    console.info(r);// false\n\n    r = isNaN(NaN);\n    console.info(r);// true\n\n    r = isNaN(\"NaN\");\n    console.info(r);// true\n\n    r = Number.isNaN(NaN);\n    console.info(r);// true\n\n    r = Number.isNaN(\"NaN\");\n    console.info(r);// false\n}\n"]}