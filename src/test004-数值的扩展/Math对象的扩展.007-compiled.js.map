{"version":3,"sources":["Math对象的扩展.007.js"],"names":[],"mappings":";;AAAA;;;;AAIA;;;;AAIA;AACI;AACA,OAAK,KAAL,CAAW,GAAX,EAFJ,CAEoB;AAChB,OAAK,KAAL,CAAW,GAAX,EAHJ,CAGoB;AAChB,OAAK,KAAL,CAAW,CAAC,GAAZ,EAJJ,CAIqB;AACjB,OAAK,KAAL,CAAW,CAAC,GAAZ,EALJ,CAKqB;AACjB,OAAK,KAAL,CAAW,CAAC,MAAZ,EANJ,CAMwB;;AAEpB;AACA,OAAK,KAAL,CAAW,SAAX,EATJ,CASyB;;AAErB;AACA,OAAK,KAAL,CAAW,GAAX,EAZJ,CAY0B;AACtB,OAAK,KAAL,CAAW,KAAX,EAbJ,CAa0B;AACtB,OAAK,KAAL,GAdJ,CAc0B;AACzB;AACD;;;;;;;;;;AAUA;AACI,OAAK,IAAL,CAAU,CAAC,CAAX,EADJ,CACkB;AACd,OAAK,IAAL,CAAU,CAAV,EAFJ,CAEiB;AACb,OAAK,IAAL,CAAU,CAAV,EAHJ,CAGiB;AACb,OAAK,IAAL,CAAU,CAAC,CAAX,EAJJ,CAIkB;AACd,OAAK,IAAL,CAAU,GAAV,EALJ,CAKmB;AACf,OAAK,IAAL,CAAU,KAAV,EANJ,CAMsB;AAClB,OAAK,IAAL,GAPJ,CAOsB;AAErB;AACD;;;;AAIA;AACI;AACA,OAAK,IAAL,CAAU,CAAC,CAAX,EAFJ,CAEkB;AACd,OAAK,IAAL,CAAU,CAAV,EAHJ,CAGkB;AACd,OAAK,IAAL,CAAU,CAAV,EAJJ,CAIkB;AACd,OAAK,IAAL,CAAU,CAAV,EALJ,CAKkB;;AAEd;AACA,OAAK,IAAL,CAAU,GAAV,EARJ,CAQmB;AACf,OAAK,IAAL,CAAU,OAAV,EATJ,CASuB;AACtB;AACD;;;;AAIA;AACI;AACA,OAAK,KAAL,CAAW,CAAX,EAFJ,CAEkB;;AAEd;AACA,OAAK,KAAL,CAAW,CAAX,EALJ,CAKkB;;AAEd;AACA,OAAK,KAAL,CAAW,IAAX,EARJ,CAQqB;;;AAGjB,OAAK,KAAL,CAAW,UAAX,EAXJ,CAWmD;AAC/C,OAAK,KAAL,CAAW,SAAX,EAZJ,CAYmD;AAClD;;AAID;;;AAGA;AACI,OAAK,KAAL,CAAW,CAAX,EADJ,CACkB;AACd,OAAK,KAAL,CAAW,CAAX,EAFJ,CAEkB;AACd,OAAK,KAAL,CAAW,KAAK,CAAhB,EAHJ,CAGuB;AACnB,OAAK,KAAL,CAAW,KAAK,CAAhB,EAJJ,CAIuB;AACnB,OAAK,KAAL,CAAW,KAAK,EAAhB,EALJ,CAKwB;AACvB;AACD;;;AAGA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AACI,OAAK,KAAL,CAAW,GAAX,EADJ,CACoB;AAChB,OAAK,KAAL,CAAW,GAAX,EAFJ,CAEoB;AACnB;AACD;;;AAGA,QAAQ,GAAR,CAAY,mBAAZ;AACA;AACI,OAAK,KAAL,GADJ,CACiB;AACb,OAAK,KAAL,CAAW,GAAX,EAFJ,CAEoB;AAChB,OAAK,KAAL,CAAW,QAAX,EAHJ,CAGyB;AACrB,OAAK,KAAL,CAAW,IAAX,EAJJ,CAIqB;AACjB,OAAK,KAAL,CAAW,KAAX,EALJ,CAKsB;AAClB,OAAK,KAAL,CAAW,EAAX,EANJ,CAMmB;AACf,OAAK,KAAL,CAAW,EAAX,EAPJ,CAOmB;AACf,OAAK,KAAL,CAAW,IAAX,EARJ,CAQqB;AACpB","file":"Math对象的扩展.007-compiled.js","sourcesContent":["/**\n * Created by liguohua on 2016/10/11.\n */\n\n/**\n *Math.trunc()\n Math.trunc方法用于去除一个数的小数部分，返回整数部分。\n */\n{\n    //去除一个数的小数部分，返回整数部分。\n    Math.trunc(4.1) // 4\n    Math.trunc(4.9) // 4\n    Math.trunc(-4.1) // -4\n    Math.trunc(-4.9) // -4\n    Math.trunc(-0.1234) // -0\n\n    //对于非数值，Math.trunc内部使用Number方法将其先转为数值。\n    Math.trunc('123.456')// 123\n\n    //对于空值和无法截取整数的值，返回NaN。\n    Math.trunc(NaN);      // NaN\n    Math.trunc('foo');    // NaN\n    Math.trunc();         // NaN\n}\n/**\n *Math.sign()\n Math.sign方法用来判断一个数到底是正数、负数、还是零。\n 它会返回五种值。\n 参数为正数，返回+1；\n 参数为负数，返回-1；\n 参数为0，返回0；\n 参数为-0，返回-0;\n 其他值，返回NaN。\n */\n{\n    Math.sign(-5) // -1\n    Math.sign(5) // +1\n    Math.sign(0) // +0\n    Math.sign(-0) // -0\n    Math.sign(NaN) // NaN\n    Math.sign('foo'); // NaN\n    Math.sign();      // NaN\n\n}\n/**\n *Math.cbrt() § ⇧\n Math.cbrt方法用于计算一个数的立方根。\n */\n{\n    //计算一个数的立方根。\n    Math.cbrt(-1) // -1\n    Math.cbrt(0)  // 0\n    Math.cbrt(1)  // 1\n    Math.cbrt(2)  // 1.2599210498948734\n\n    //对于非数值，Math.cbrt方法内部也是先使用Number方法将其转为数值。\n    Math.cbrt('8') // 2\n    Math.cbrt('hello') // NaN\n}\n/**\n *Math.clz32()\n JavaScript的整数使用32位二进制形式表示，Math.clz32方法返回一个数的32位无符号整数形式有多少个前导0。\n */\n{\n    //0的二进制形式全为0，所以有32个前导0；\n    Math.clz32(0) // 32\n\n    //1的二进制形式是0b1，只占1位，所以32位之中有31个前导0；\n    Math.clz32(1) // 31\n\n    //1000的二进制形式是0b1111101000，一共有10位，所以32位之中有22个前导0。\n    Math.clz32(1000) // 22\n\n\n    Math.clz32(0b01000000000000000000000000000000) // 1\n    Math.clz32(0b00100000000000000000000000000000) // 2\n}\n\n\n\n/**\n *左移运算符（<<）与Math.clz32方法直接相关。\n */\n{\n    Math.clz32(0) // 32\n    Math.clz32(1) // 31\n    Math.clz32(1 << 1) // 30\n    Math.clz32(1 << 2) // 29\n    Math.clz32(1 << 29) // 2\n}\n/**\n *对于小数，Math.clz32方法只考虑整数部分。\n */\nconsole.log(\"**************001\");\n{\n    Math.clz32(3.2) // 30\n    Math.clz32(3.9) // 30\n}\n/**\n *对于空值或其他类型的值，Math.clz32方法会将它们先转为数值，然后再计算。\n */\nconsole.log(\"**************001\");\n{\n    Math.clz32() // 32\n    Math.clz32(NaN) // 32\n    Math.clz32(Infinity) // 32\n    Math.clz32(null) // 32\n    Math.clz32('foo') // 32\n    Math.clz32([]) // 32\n    Math.clz32({}) // 32\n    Math.clz32(true) // 31\n}\n"]}