{"version":3,"sources":["扩展运算符.003.1.js"],"names":[],"mappings":"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","file":"扩展运算符.003.1-compiled.js","sourcesContent":["/**\n * Created by liguohua on 2016/10/12.\n */\n\n/**\n *扩展运算符（spread）是三个点（...）。它好比rest参数的逆运算，将一个数组转为用空格分隔的参数序列。\n */\nconsole.log(\"**************001\");\n{\n    console.log(...[1, 2, 3]);// 1 2 3\n\n    console.log(1, ...[2, 3, 4], 5);// 1 2 3 4 5\n\n    //[...document.querySelectorAll('div')]// [<div>, <div>, <div>]\n}\n/**\n *该运算符主要用于函数调用\n * 用法一\n */\nconsole.log(\"**************002\");\n{\n    function push(array, ...items) {\n        //扩展运算符\n        array.push(...items);\n    }\n\n    let arr = [1, 2];\n    console.info(arr);//[ 1, 2 ]\n\n    push(arr, 3, 4, 5, 6);\n    console.info(arr);//[ 1, 2, 3, 4, 5, 6 ]\n}\n/**\n *该运算符主要用于函数调用\n * 用法二\n */\nconsole.log(\"**************003\");\n{\n    function add(x, y) {\n        return x + y;\n    }\n\n    var numbers = [4, 38];\n    //扩展运算符\n    let r = add(...numbers);\n    console.info(r);// 42\n}\n/**\n *扩展运算符与正常的函数参数可以结合使用，非常灵活。\n */\nconsole.log(\"**************004\");\n{\n    function f(v, w, x, y, z, a, b) {\n        console.info(v);\n        console.info(w);\n        console.info(x);\n        console.info(y);\n        console.info(z);\n        console.info(a);\n        console.info(b);\n    }\n\n    f(-1, ...[0, 1], 2, ...[3, 4, 5]);\n}\n\n/**\n *替代数组的apply方法\n 由于扩展运算符可以展开数组，所以不再需要apply方法，将数组转为函数的参数了。\n */\nconsole.log(\"**************005\");\n{\n    // ES5的写法\n    function f5(x, y, z) {\n        console.info(x);\n        console.info(y);\n        console.info(z);\n    }\n\n    var args = [0, 1, 2];\n    f5.apply(null, args);\n    console.log(\"%%%%%%%%%%%%%%%%\");\n    // ES6的写法\n    function f6(x, y, z) {\n        console.info(x);\n        console.info(y);\n        console.info(z);\n    }\n\n    var args = [0, 1, 2];\n    f6(...args);\n}\n/**\n *下面是扩展运算符取代apply方法的一个实际的例子，应用Math.max方法，简化求出一个数组最大元素的写法。\n */\nconsole.log(\"**************006\");\n{\n    // ES5的写法\n    let r = Math.max.apply(null, [14, 3, 77]);\n    console.info(r);\n\n    // ES6的写法\n    Math.max(...[14, 3, 77]);\n    console.info(r);\n\n    // 等同于\n    Math.max(14, 3, 77);\n    console.info(r);\n\n}\n/**\n *另一个例子是通过push函数，将一个数组添加到另一个数组的尾部。\n */\nconsole.log(\"**************007\");\n{\n    {\n        // ES5的写法\n        var arr1 = [0, 1, 2];\n        var arr2 = [3, 4, 5];\n        Array.prototype.push.apply(arr1, arr2);\n        console.info(arr1);\n    }\n    console.log(\"%%%%%%%%%%%%%%%%\");\n    {\n        // ES6的写法\n        var arr1 = [0, 1, 2];\n        var arr2 = [3, 4, 5];\n        arr1.push(...arr2);\n        console.info(arr1);\n    }\n}\n/**\n *下面是另外一个例子\n */\nconsole.log(\"**************008\");\n{\n    // ES5\n    let r = new (Date.bind.apply(Date, [null, 2015, 1, 1]));\n    console.info(r);\n\n    // ES6\n    r = new Date(...[2015, 1, 1]);\n    console.info(r);\n\n}\n"]}