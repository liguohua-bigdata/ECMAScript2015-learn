{"version":3,"sources":["扩展运算符.003.2.js"],"names":[],"mappings":"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","file":"扩展运算符.003.2-compiled.js","sourcesContent":["/**\n * Created by liguohua on 2016/10/12.\n */\n\n/**\n *扩展运算符的应用\n * （1）合并数组\n 扩展运算符提供了数组合并的新写法。\n */\nconsole.log(\"**************001\");\n{\n    var arr1 = ['a', 'b'];\n    var arr2 = ['c'];\n    var arr3 = ['d', 'e'];\n    // ES5的合并数组\n    let r = arr1.concat(arr2, arr3);\n    console.info(r);// [ 'a', 'b', 'c', 'd', 'e' ]\n    // ES6的合并数组\n    r = [...arr1, ...arr2, ...arr3];\n    console.info(r);// [ 'a', 'b', 'c', 'd', 'e' ]\n}\n/**\n *（2）与解构赋值结合\n\n 扩展运算符可以与解构赋值结合起来，用于生成数组。\n */\n{\n    {\n        const [first, ...rest] = [1, 2, 3, 4, 5];\n        first // 1\n        rest  // [2, 3, 4, 5]\n    }\n    {\n        const [first, ...rest] = [];\n        first // undefined\n        rest  // []:\n    }\n    {\n        const [first, ...rest] = [\"foo\"];\n        first  // \"foo\"\n        rest   // []\n    }\n}\n/**\n （3）函数的返回值\n JavaScript的函数只能返回一个值，如果需要返回多个值，只能返回数组或对象。\n\n\n var dateFields = readDateFields(database);\n var d = new Date(...dateFields);\n */\n\n/**\n *（4）字符串\n\n 扩展运算符还可以将字符串转为真正的数组。\n 能够正确识别32位的Unicode字符\n */\nconsole.log(\"**************002\");\n{\n    let r = [...'hello'];\n    console.info(r);\n    // [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n\n    r = 'x\\uD83D\\uDE80y'.length;\n    console.info(r); // 4\n\n    r = [...'x\\uD83D\\uDE80y'].length;\n    console.info(r);// 3\n}\n\n/**\n *JavaScript会将32位Unicode字符，识别为2个字符，采用扩展运算符就没有这个问题。因此，正确返回字符串长度的函数，可以像下面这样写。\n */\nconsole.log(\"**************003\");\n{\n    function length(str) {\n        return [...str].length;\n    }\n\n    let r = length('x\\uD83D\\uDE80y');\n    console.info(r);// 3\n}\n/**\n *（5）实现了Iterator接口的对象\n * 任何Iterator接口的对象，都可以用扩展运算符转为真正的数组。\n\n\n var nodeList = document.querySelectorAll('div');\n var array = [...nodeList];\n\n */\nconsole.log(\"**************004\");\n{\n    let arrayLike = {\n        '0': 'a',\n        '1': 'b',\n        '2': 'c',\n        length: 3\n    };\n\n    // TypeError: Cannot spread non-iterable object.\n    // let arr = [...arrayLike];\n\n    let arr = [...Array.from(arrayLike)];\n    console.info(arr);\n}\n/**\n *（6）Map和Set结构，Generator函数\n * 扩展运算符内部调用的是数据结构的Iterator接口，因此只要具有Iterator接口的对象，\n */\nconsole.log(\"**************005\");\n{\n    let map = new Map([\n        [1, 'one'],\n        [2, 'two'],\n        [3, 'three'],\n    ]);\n\n    let arr = [...map.keys()]; // [1, 2, 3]\n    console.info(arr);\n}\n/**\n *Generator函数运行后，返回一个遍历器对象，因此也可以使用扩展运算符。\n */\nconsole.log(\"**************006\");\n{\n    //变量go是一个Generator函数，执行后返回的是一个遍历器对象，对这个遍历器对象执行扩展运算符，就会将内部遍历得到的值，转为一个数组\n    var go = function*() {\n        yield 1;\n        yield 2;\n        yield 3;\n    };\n    let arr=go();\n    console.info(arr);\n\n    let r = [...arr];\n    console.info(r);// [1, 2, 3]\n}\n/**\n * 果对没有iterator接口的对象，使用扩展运算符，将会报错。\n */\n{\n    var obj = {a: 1, b: 2};\n    //let arr = [...obj]; // TypeError: Cannot spread non-iterable object\n}"]}